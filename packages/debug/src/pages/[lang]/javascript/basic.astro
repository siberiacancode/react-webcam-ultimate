---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

import Layout from '@/layouts/Layout.astro';
import { Breadcrumbs } from '@/layouts/Breadcrumbs';
import { Button, buttonVariants } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';

import { generateAlternate } from '@/lib/utils';

interface Props {
  translation: CollectionEntry<'javascript~basic'>;
}

export const getStaticPaths = async () => {
  const translations = await getCollection('javascript~basic');

  const paths = translations.map((translation) => ({
    params: {
      lang: translation.id,
      slug: `/${translation.id}/${translation.collection.replaceAll('~', '/')}`
    },
    props: { translation }
  }));

  return paths;
};

const { translation } = Astro.props;
---

<script>
  import { toast } from 'sonner';

  import { getMediaStream } from '@webcam/react';

  const buttonOpenCamera = document.getElementById('button-open-camera')! as HTMLButtonElement;
  const video = document.getElementById('camera')! as HTMLVideoElement;

  buttonOpenCamera.addEventListener('click', async () => {
    const constraints = {
      audio: false,
      video: true
    };

    try {
      const stream = await getMediaStream({ constraints });
      buttonOpenCamera.disabled = true;

      // @ts-ignore
      window.stream = stream;
      video.srcObject = stream;

      const videoTracks = stream.getVideoTracks();

      const [videoDevice] = videoTracks;
      console.log('Got stream with constraints:', videoDevice.id, videoDevice.getConstraints());
      toast.success(`Using video device: ${videoDevice.label}`);

      const captions = document.createElement('captions');
      captions.innerHTML = videoDevice.label;
      video.appendChild(captions);
    } catch (error: any) {
      if (error?.name === 'NotAllowedError') {
        return toast.error(
          'Permissions have not been granted to use your camera, you need to allow the page access to your devices.'
        );
      }

      toast.error(`getUserMedia error: ${error}`, error);
    }
  });
</script>

<Layout
  title={translation.data.title}
  description={translation.data.description}
  framework='javascript'
  language={translation.id}
  seo={{
    languageAlternates: generateAlternate('/javascript/basic')
  }}
>
  <section class='w-full py-12'>
    <Breadcrumbs
      client:load
      items={[
        {
          href: `/${translation.id}`,
          children: translation.data['breadcrumbs.home']
        },
        {
          href: `/${translation.id}/javascript`,
          children: translation.data['breadcrumbs.javascript']
        },
        {
          children: translation.data['breadcrumbs.basic']
        }
      ]}
    />

    <div>
      <div class='flex w-full flex-col justify-start gap-1'>
        <div class='flex flex-col-reverse items-start md:flex-row'>
          <h1 class='text-3xl font-bold tracking-tight'>{translation.data.title}</h1>
          <a href='#' target='_blank' class={buttonVariants({ variant: 'link' })}>
            {translation.data['link.viewSource']}
          </a>
        </div>

        <p class='text-gray-500 dark:text-gray-400'>
          {translation.data.description}
        </p>

        <Separator className='my-4' />
      </div>

      <div class='my-2'>
        <Button id='button-open-camera'>{translation.data['button.openCamera']}</Button>
      </div>

      <video id='camera' autoplay playsinline></video>
    </div>
  </section>
</Layout>
