---
import { getCollection } from 'astro:content';
import type { HTMLAttributes } from 'astro/types';

import { ModeToggle } from '@/components/ModeToggle';
import { FrameworkSelect } from '@/components/FrameworkSelect';
import { LanguageSelect } from '@/components/LanguageSelect';
import { Toaster } from '@/components/ui/sonner';

import '@/assets/globals.css';

interface Props {
  title: string;
  description: string;
  framework: 'javascript' | 'react';
  language: 'ru' | 'en';
  seo?: {
    keywords?: string[];
    canonical?: string[];
    charset?: string;
    languageAlternates?: { href: string; hreflang: string }[];
    meta?: Partial<HTMLAttributes<'meta'>>[];
  };
}

const defaultSeo = {
  keywords: [
    'media',
    'video',
    'react',
    'canvas',
    'camera',
    'webcam',
    'stream',
    'userMedia',
    'navigator',
    'screenshot',
    'constraints',
    'getUserMedia',
    'react-webcam',
    'webcam-canvas'
  ],
  charset: 'UTF-8'
};
const { framework, language, seo, title, description } = Astro.props;

const layoutCollection = await getCollection('layout');
const translations = layoutCollection.find((translation) => translation.id === language);
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>

<html lang={language}>
  <head>
    <meta charset={seo?.charset ?? defaultSeo.charset} />
    <title set:html={title} />
    <meta name='description' content={description} />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <meta name='keywords' content={seo?.keywords?.join(', ') ?? defaultSeo.keywords?.join(', ')} />
    {seo?.meta?.map((attributes) => <meta {...attributes} />)}
    {
      seo?.languageAlternates?.map((alternate) => (
        <link rel='alternate' hreflang={alternate.hreflang} href={alternate.href} />
      ))
    }
    <meta
      property='og:image'
      content='https://opengraph.githubassets.com/897dd391ad26f4fcc8ee1e4060713fe782fef80dff3427307adc705de645e229/siberiacancode/react-webcam-ultimate'
    />
    <meta
      property='og:image:alt'
      content='ðŸ“¸ ultimate tool for working with media stream and displaying it in your react application - siberiacancode/react-webcam-ultimate'
    />
    <meta property='og:image:width' content='1200' /><meta
      property='og:image:height'
      content='600'
    />
    <meta property='og:site_name' content='GitHub' /><meta property='og:type' content='object' />
    <meta
      property='og:title'
      content='siberiacancode/react-webcam-ultimate: ðŸ“¸ ultimate tool for working with media stream and displaying it in your react application'
    />
    <meta property='og:url' content='https://github.com/siberiacancode/react-webcam-ultimate' />
    <meta
      property='og:description'
      content='ðŸ“¸ ultimate tool for working with media stream and displaying it in your react application - siberiacancode/react-webcam-ultimate'
    />
  </head>
  <body>
    <div class='container flex h-screen flex-col justify-between px-4'>
      <div>
        <header class='flex items-center justify-between space-y-2 py-4 sm:space-y-0 md:h-16'>
          <h1 class='text-lg font-semibold'>Playground</h1>
          <div class='flex gap-4'>
            <FrameworkSelect value={framework} client:load />
            <LanguageSelect value={language} client:load />
            <ModeToggle client:load />
          </div>
        </header>
        <slot />
        <Toaster client:load duration={10000} />
      </div>
      <footer class='flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row'>
        <p
          class='text-balance text-center text-sm leading-loose text-muted-foreground md:text-left'
        >
          <span set:html={translations.data['link.builtBy']} />
          <span set:html={translations.data['link.sourceCode']} />
        </p>
      </footer>
    </div>
  </body>
</html>
